name: NetsPresso QA Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install torch torchvision netspresso
        fi
        pip install pytest pytest-html pytest-json-report
    
    - name: Create directories
      run: |
        mkdir -p tests
        mkdir -p results/test_results
        mkdir -p results/reports
    
    - name: Create basic test file
      run: |
        cat > tests/test_basic.py << 'EOF'
        import pytest
        import os
        import sys
        from datetime import datetime

        class TestBasicFunctionality:
            def test_python_version(self):
                """Python 버전 확인"""
                assert sys.version_info >= (3, 8)
                print(f"✅ Python 버전: {sys.version}")
            
            def test_api_key_exists(self):
                """API 키 존재 확인"""
                api_key = os.environ.get('NETSPRESSO_API_KEY')
                if api_key:
                    assert len(api_key) > 10
                    print("✅ API 키 확인됨")
                else:
                    print("⚠️ API 키가 설정되지 않음")
            
            def test_torch_import(self):
                """PyTorch import 테스트"""
                try:
                    import torch
                    print(f"✅ PyTorch 버전: {torch.__version__}")
                except ImportError:
                    pytest.skip("PyTorch 설치되지 않음")
            
            def test_netspresso_import(self):
                """NetsPresso import 테스트"""
                try:
                    import netspresso
                    print("✅ NetsPresso 라이브러리 import 성공")
                except ImportError:
                    print("⚠️ NetsPresso 라이브러리 없음")
            
            def test_file_system(self):
                """파일 시스템 테스트"""
                import json
                
                # 테스트 결과 저장
                test_result = {
                    "test_name": "basic_file_system_test",
                    "timestamp": datetime.now().isoformat(),
                    "success": True,
                    "environment": "github_actions"
                }
                
                os.makedirs('results/test_results', exist_ok=True)
                filename = f'results/test_results/basic_test_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(test_result, f, ensure_ascii=False, indent=2)
                
                assert os.path.exists(filename)
                print(f"✅ 테스트 결과 저장: {filename}")
        EOF
    
    - name: Run basic tests
      env:
        NETSPRESSO_API_KEY: ${{ secrets.NETSPRESSO_API_KEY }}
      run: |
        echo "🧪 기본 테스트 실행 중..."
        python -m pytest tests/test_basic.py -v --json-report --json-report-file=results/pytest_report.json --html=results/pytest_report.html --self-contained-html
      continue-on-error: true
    
    - name: Run additional NetsPresso tests
      env:
        NETSPRESSO_API_KEY: ${{ secrets.NETSPRESSO_API_KEY }}
      run: |
        echo "🔍 추가 NetsPresso 테스트..."
        
        # 기존 스크립트가 있으면 실행
        if [ -f "src/netspresso_client.py" ]; then
          echo "NetsPresso 클라이언트 실행"
          timeout 300 python src/netspresso_client.py || echo "클라이언트 실행 완료 (타임아웃 또는 오류)"
        fi
        
        if [ -f "scripts/test_result_saver.py" ]; then
          echo "테스트 결과 변환"
          python scripts/test_result_saver.py || echo "결과 변환 완료"
        fi
      continue-on-error: true
    
    - name: Generate QA report
      run: |
        echo "📊 QA 리포트 생성..."
        
        python3 << 'EOF'
        import json
        import os
        from datetime import datetime

        report = f"""# NetsPresso QA 테스트 리포트

        **생성 시각**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        **실행 환경**: GitHub Actions
        **워크플로우 ID**: ${{ github.run_id }}

        ## 📊 테스트 결과 요약

        """

        # pytest 결과 읽기
        pytest_file = 'results/pytest_report.json'
        if os.path.exists(pytest_file):
            try:
                with open(pytest_file, 'r') as f:
                    pytest_data = json.load(f)
                
                summary = pytest_data.get('summary', {})
                total = summary.get('total', 0)
                passed = summary.get('passed', 0)
                failed = summary.get('failed', 0)
                
                report += f"""| 항목 | 값 |
        |------|----:|
        | 전체 테스트 | {total}개 |
        | 성공 | {passed}개 |
        | 실패 | {failed}개 |
        """
                
                if total > 0:
                    success_rate = (passed / total) * 100
                    report += f"| 성공률 | {success_rate:.1f}% |\n"
                
            except Exception as e:
                report += f"pytest 결과 로드 오류: {e}\n"
        else:
            report += "pytest 결과 파일을 찾을 수 없습니다.\n"

        report += """

        ## 🎯 QA 결론

        - GitHub Actions에서 자동 테스트 실행 완료
        - 기본 기능 검증 수행
        - 지속적인 품질 모니터링 활성화

        ## 📋 다음 단계

        1. 실패한 테스트가 있다면 원인 분석
        2. API 키 및 환경 설정 검토  
        3. 추가 테스트 케이스 개발

        ---
        *이 리포트는 GitHub Actions에서 자동 생성되었습니다.*
        """

        # 리포트 저장
        os.makedirs('results', exist_ok=True)
        with open('results/qa_summary_report.md', 'w', encoding='utf-8') as f:
            f.write(report)

        print('✅ QA 리포트 생성 완료')
        EOF
    
    - name: Create test summary
      if: always()
      run: |
        echo "📝 테스트 요약 생성..."
        {
          echo "=== NetsPresso QA 테스트 결과 ==="
          echo "실행 시간: $(date)"
          echo "워크플로우 ID: ${{ github.run_id }}"
          echo "트리거: ${{ github.event_name }}"
          echo ""
          echo "=== 생성된 파일 ==="
          find results/ -type f 2>/dev/null || echo "결과 파일 없음"
          echo ""
          echo "=== 테스트 완료 ==="
        } > test_summary.txt
    
    - name: Upload results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          test_summary.txt
          results/
        retention-days: 30
    
    - name: Display results summary
      if: always()
      run: |
        echo "🎉 GitHub Actions 테스트 완료!"
        echo ""
        echo "📊 결과 확인 방법:"
        echo "1. 위 단계의 'Upload results' 아티팩트 다운로드"
        echo "2. results/ 폴더 내 qa_summary_report.md 확인"
        echo "3. pytest_report.html로 상세 테스트 결과 확인"
        echo ""
        echo "🔗 아티팩트 다운로드: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"